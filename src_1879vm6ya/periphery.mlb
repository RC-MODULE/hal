// 8.3.2 (стр 152):	Запрос на прерывание по нормальному завершению работы контроллера ПДП  выставляется, 
// когда выполняется следующее условие: 
// - установлен бит Cpl регистра DMARC_Control и 
// - сброшен бит маски MIC в регистре DMARC_InterruptMask  (в т.ч. в конце процесса передачи).

macro DECLARE_HW_CONST()

const DMATR_MainCounter		= 1001_0000h;	// [16] 7.9.1	Основной счётчик данных (MainCounter)
											// Формат основного счётчика данных представлен на рисунке 7.10. Запись в него устанавливает количество 64-разрядных слов в массиве, который следует предать/принять по коммуникационному порту. При чтении возвращается количество 64-разрядных слов, которое осталось предать/принять.
const DMATR_Address			= 1001_0002h;	// [32]
const DMATR_Bias            = 1001_0004h;	// [32] 7.9.3	Регистр смещения адреса (Bias)
											// Формат регистра смещения адреса представлен на рисунке 7.12. Данный регистр используется только при двухмерной адресации, при одномерной адресации он может быть не определён. Запись в него устанавливает смещение адреса при переходе от конца одной строки передаваемого массива до начала следующей. Например, если размер пропускаемого фрагмента – Ns 32-разрядных слов, то в регистр Bias следует записывать значение Ns+2. Записываемое значение регистра Bias должно быть чётным.
const DMATR_RowCounter      = 1001_0006h;	// [16] 7.9.4	Счётчик последовательных данных (RowCounter)
											// Формат счётчика последовательных данных представлен на рисунке 7.13. Данный регистр используется только при двухмерной адресации, при одномерной адресации он может быть не определён. Запись в него устанавливает размер строки в 64-разрядных словах передаваемого массива.
const DMATR_AddressMode     = 1001_0008h;	// [1]
const DMATR_Control			= 1001_000Ah; 	// [4] Бит En (0-й разряд). Запись в бит En = 1 запускает передачу/приём.
							 				// Бит Cpl (1-й разряд). При чтении Cpl = 1 означает, что текущие передача или приём завершены. 
											// Чтобы произвести следующий запуск, необходимо записать Cpl = 0.
const DMATR_InterruptMask	= 1001_000Ch;	// [2] Бит MIC (0-й разряд) – маска запроса на прерывание по нормальному завершению обмена данными: 
							 				// 0 – запрос разрешён;
							 				// 1 – запрос замаскирован
											// После RESET = 0
const DMATR_State			= 1001_000Eh;	// [10]	  

const DMARC_MainCounter	    = 1001_0010h;
const DMARC_Address		    = 1001_0012h;
const DMARC_Bias            = 1001_0014h;
const DMARC_RowCounter      = 1001_0016h;
const DMARC_AddressMode     = 1001_0018h;
const DMARC_Control		    = 1001_001Ah;

const DMARC_InterruptMask   = 1001_001Ch;
const DMARC_State			= 1001_001Eh;

// Таблица 7.22   Прерывания процессорной системы /стр. 140
// 32	0(поз бита)	прерывание по завершению работы канала ПДП память-память (от MDMAC)
// 33	1(поз бита)	прерывание по ошибке доступа в память канала ПДП память-память (от MDMAC)

// Таблица 7.23 / стр. 143
const IRESERVED = 4000_0406h;
const IRRH		= 4000_0440h;	//	Регистр запросов на прерывание с номерами от 32 до 39. Значение 1 в бите данного регистра показывает наличие запроса, для которого ещё не выполнена команда перехода по адресу-вектору прерывания. Программный сброс битов данного регистра производится только с помощью регистра IRRH_CLR.
const IRRH_SET 	= 4000_0442h;	//	ЧТ/ЗП	Побитовая установка регистра IRRH.
const IRRH_CLR 	= 4000_0444h;	//	ЧТ/ЗП	Побитовый сброс регистра IRRH. Программный сброс бита регистра IRRH следует делать, когда данный запрос замаскирован.


const IASH	    = 4000_0458h; 	// ЧТ Регистр подтверждения и статуса запросов с номерами от 32 до 39. Значение 0 - запрос обработан, 1 - запрос обрабатывается (выполнен или выполняется переход по адресу-вектору, но бит регистра IASH ещё не сброшен
const IASH_CLR  = 4000_045Ch;	// ЧТ/ЗП	Побитовый сброс регистра IASH.
const IMRH      = 4000_0448h;	// ЧТ/ЗП	Регистр маски прерываний с номерами о 0 до 31.
								// Значение 0 - прерывание запрещено, 1 - прерывание разрешено.
								//          после RESET 0
const IMRL_SET	= 4000_040Ah; 	// ЧТ/ЗП	Побитовая установка регистра IMRL.								
const IMRH_SET  = 4000_044Ah;	// ЧТ/ЗП	Побитовая установка регистра IMRH.
const IMRH_CLR  = 4000_044Ch;	// ЧТ/ЗП	Побитовый сброс регистра IMRH.

//============ vector interrupt table ==========================
const VECTOR_CPU_IRQ0    = 20h+12*8;
const VECTOR_DMA         = 20h+32*8;
const VECTOR_DMA_HANDLER = VECTOR_DMA+5;

end DECLARE_HW_CONST;